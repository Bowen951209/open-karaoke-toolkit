//file:noinspection ConfigurationAvoidance
//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
plugins {
    id 'java'
    id 'application'
    id 'java-library'
    id 'org.bytedeco.gradle-javacpp-platform' version "1.5.10"
}

ext {
    javacppPlatform = 'linux-x86_64,macosx-x86_64,windows-x86_64'
}

group = 'net.bowen'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    api('org.bytedeco:javacv:1.5.10') {
        exclude group: 'org.bytedeco', module: 'artoolkitplus'
        exclude group: 'org.bytedeco', module: 'ffmpeg'
        exclude group: 'org.bytedeco', module: 'flycapture'
        exclude group: 'org.bytedeco', module: 'leptonica'
        exclude group: 'org.bytedeco', module: 'libdc1394'
        exclude group: 'org.bytedeco', module: 'libfreenect'
        exclude group: 'org.bytedeco', module: 'libfreenect2'
        exclude group: 'org.bytedeco', module: 'librealsense'
        exclude group: 'org.bytedeco', module: 'librealsense2'
        exclude group: 'org.bytedeco', module: 'openblas'
        exclude group: 'org.bytedeco', module: 'opencv'
        exclude group: 'org.bytedeco', module: 'tesseract'
        exclude group: 'org.bytedeco', module: 'videoinput'
    }
    // The GPL dependency enable us to use H.265/HEVC codec(libx265 GPL license problem).
    api('org.bytedeco:ffmpeg-platform-gpl:6.1.1-1.5.10') {
        exclude group: 'org.bytedeco', module: 'javacpp-platform'
    }
}

test {
    useJUnitPlatform()
}

application {
    mainClassName = 'net.okt.Main'
}

task runWithTaiwaneseSampleFile(type: JavaExec) {
    mainClass = 'net.okt.Main'
    classpath = sourceSets.main.runtimeClasspath
    args = ['src/main/resources/saves/sample.properties']
}

task runWithEnglishSmapleFile(type: JavaExec) {
    mainClass = 'net.okt.Main'
    classpath = sourceSets.main.runtimeClasspath
    args = ['src/main/resources/saves/clock.properties']
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': application.mainClass
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    with jar
}
